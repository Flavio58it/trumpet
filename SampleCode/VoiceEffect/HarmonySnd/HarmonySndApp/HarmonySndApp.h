/*---------------------------------------------------------------------------------------------------------*/
/*                                                                                                         */
/* Copyright(c) Nuvoton Technology Corp. All rights reserved.                                              */
/*                                                                                                         */
/*---------------------------------------------------------------------------------------------------------*/
#ifndef __CONFIGHARMONYSNDAPP_H__
#define __CONFIGHARMONYSNDAPP_H__	 

#include "MD4.h"
#include "PlaybackRecord.h"
//#include "Audio/PitchFrequence.h"

#define HARMONYSNDAPP_OUT_IN_SAMPLE_RATE_RATIO	1.0
#define HARMONYSNDAPP_IN_SAMPLE_RATE		12000
#define HARMONYSNDAPP_OUT_SAMPLE_RATE		(HARMONYSNDAPP_OUT_IN_SAMPLE_RATE_RATIO*HARMONYSNDAPP_IN_SAMPLE_RATE)

#define HARMONYSNDAPP_OUT_FRAME_NUM	  					(40)
#define HARMONYSNDAPP_OUT_SAMPLES_PER_FRAME				(8)
#define HARMONYSNDAPP_OUT_BUF_SIZE						(HARMONYSNDAPP_OUT_SAMPLES_PER_FRAME*HARMONYSNDAPP_OUT_FRAME_NUM)

#define HARMONYSNDAPP_WORK_BUF_SIZE						(0xcd4)	

#define	HARMONYSNDAPP_CH_NUM							(2)		


typedef struct 
{
	INT8 u8ChannelIndex;								// It indicates which channel to be set.
	INT8 i8ShiftPitch;									// Harmony sound is generated by shifting the pitch of input sound.
	UINT8 u8Volume;										// 0~255 to set the volume of this channel.
	UINT8 u8ModRange;									// It sets the range of frequency modulation wheel, limit the range to be 1~3 semi-tones.
	UINT8 u8ModDepth;									// It sets the depth of frequency modulation wheel.The real frequency oscillation depth will be (u8ModRange* u8ModDepth)>>8.
	UINT8 u8Modfreq;									// It sets oscillation frequency of modulation wheel. It’s a 4.4 fix point number.
	UINT8 u8ModDelayTime;								// It starts to work after input sound start from silence and elapse u8ModDelayTime time unit. The time unit is 5 msec.
} S_HARMONYSND_CH_PARAMETERS;


#define HARMONYSNDAPP_CTRL_INPUT_FROM_BUF		1
#define HARMONYSNDAPP_CTRL_INPUT_FROM_FUNC		2
#define HARMONYSNDAPP_CTRL_INPUT_SOURCE		(HARMONYSNDAPP_CTRL_INPUT_FROM_BUF|HARMONYSNDAPP_CTRL_INPUT_FROM_FUNC)
typedef BOOL (*PFN_HARMONYSNDAPP_INPUT_FUNC)(UINT16 u16InputCount, INT16 *pi16InputBuf);

typedef struct
{
	UINT8	m_au8HmySndBuf[HARMONYSNDAPP_WORK_BUF_SIZE];	// work buffer for HarmonySnd library
	S_BUF_CTRL 			sOutBufCtrl;							// output buffer controler
	
	union
	{
		S_BUF_CTRL_CALLBACK sInBufCtrl;						// input buffer controller
		S_BUF_CTRL *psInBufCtrl;							// input buffer controller
		PFN_HARMONYSNDAPP_INPUT_FUNC pfnInputFunc;			// callback function to get audio source  
	};
	
	INT16 				i16DacBuf[HARMONYSNDAPP_OUT_BUF_SIZE];	// output PCM buffer
	UINT8				u8ChannelID;							// mixer channel ID
	UINT8				u8CtrlFlag;								// input source control flag
}S_HARMONYSNDAPP;


//----------------------------------------------------------------------------------------------------
// Initilize Harmony Sound application.
//----------------------------------------------------------------------------------------------------
void 
HarmonySndApp_Initiate(
	S_HARMONYSNDAPP *psHarmonySndApp	// harmony sound app data structure
);

//----------------------------------------------------------------------------------------------------
// Start play harmony sound. Initiate harmony channels and output buffer.
//----------------------------------------------------------------------------------------------------
void
HarmonySndApp_StartPlay(
	S_HARMONYSNDAPP *psHarmonySndApp,	// harmony sound app data structure
	UINT8 u8ChannelID					// channel ID of mixer
);

//---------------------------------------------------------------------------------------------------
// Stop to playback.
//----------------------------------------------------------------------------------------------------
void
HarmonySndApp_StopPlay(
	S_HARMONYSNDAPP *psHarmonySndApp	// harmony sound app data structure
);

//----------------------------------------------------------------------------------------------------
// Process PCM samples in input buffer according to setting of harmony channels to get 
// PCM samples of harmony sound, and output them into output buffer.
//----------------------------------------------------------------------------------------------------
BOOL
HarmonySndApp_ProcessPlay(
	S_HARMONYSNDAPP *psHarmonySndApp	// harmony sound app data structure
);

//----------------------------------------------------------------------------------------------------
// Enable a harmony channel.
//----------------------------------------------------------------------------------------------------
void
HarmonySndApp_ChannelEnable(
	S_HARMONYSNDAPP *psHarmonySndApp,	// harmony sound app data structure
	UINT8 u8Channel						// channel index to be enabled
);

//----------------------------------------------------------------------------------------------------
// Disable a harmony channel.
//----------------------------------------------------------------------------------------------------
void
HarmonySndApp_ChannelDisable(
	S_HARMONYSNDAPP *psHarmonySndApp,	// harmony sound app data structure
	UINT8 u8Channel						// channel index to be disabled
);

//----------------------------------------------------------------------------------------------------
// Set harmony sound source is from buffer. For example: The buffer is codec decoder output buffer.
//----------------------------------------------------------------------------------------------------
BOOL
HarmonySndApp_SetInputFromBuf(
	S_HARMONYSNDAPP *psHarmonySndApp,		// harmony sound app data structure
	S_BUF_CTRL *psInPCMBuf					// Structure pointer of source buffer 
);

//----------------------------------------------------------------------------------------------------
// Set harmony sound source is from Callback function processing.
//----------------------------------------------------------------------------------------------------
BOOL
HarmonySndApp_SetInputFromFunc(
	S_HARMONYSNDAPP *psHarmonySndApp,		// harmony sound app data structure
	PFN_HARMONYSNDAPP_INPUT_FUNC pfnInputFunc,		// Callback input function 
	UINT32 u32SampleRate					// audio data sample rate after Callback function processing.
);

//----------------------------------------------------------------------------------------------------
// Set harmony sound source is from ADC. Default source is from ADC.
//----------------------------------------------------------------------------------------------------
void
HarmonySndApp_SetInputFromADC(
	S_HARMONYSNDAPP *psHarmonySndApp		// harmony sound app data structure
);

#endif //__CONFIGHARMONYSNDAPP_H__
